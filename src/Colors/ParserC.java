
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Colors;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserC extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserC() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\020\002\000\002\002" +
    "\010\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\021\002\000\002\022\002\000\002\005\012\000\002" +
    "\023\002\000\002\006\006\000\002\006\003\000\002\024" +
    "\002\000\002\007\006\000\002\007\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\025\002\000\002\010\007" +
    "\000\002\011\004\000\002\011\003\000\002\026\002\000" +
    "\002\012\006\000\002\027\002\000\002\012\006\000\002" +
    "\030\002\000\002\012\005\000\002\031\002\000\002\012" +
    "\005\000\002\032\002\000\002\012\005\000\002\012\003" +
    "\000\002\013\005\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\005\000\002" +
    "\014\004\000\002\014\004\000\002\014\003\000\002\033" +
    "\002\000\002\034\002\000\002\015\010\000\002\017\003" +
    "\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\004\011\005\001\002\000\004\002\132\001" +
    "\002\000\010\004\013\005\010\007\014\001\002\000\014" +
    "\003\130\004\013\005\010\007\014\025\ufffb\001\002\000" +
    "\004\025\111\001\002\000\010\012\uffc8\014\uffc8\016\uffc8" +
    "\001\002\000\004\016\uffe3\001\002\000\014\003\ufff9\004" +
    "\ufff9\005\ufff9\007\ufff9\025\ufff9\001\002\000\004\014\ufff8" +
    "\001\002\000\010\012\uffc7\014\uffc7\016\uffc7\001\002\000" +
    "\014\003\ufffa\004\ufffa\005\ufffa\007\ufffa\025\ufffa\001\002" +
    "\000\004\014\017\001\002\000\006\005\010\007\014\001" +
    "\002\000\004\016\ufff7\001\002\000\004\016\022\001\002" +
    "\000\032\007\041\010\026\011\037\012\034\013\036\014" +
    "\025\015\035\020\040\021\031\022\027\023\030\024\024" +
    "\001\002\000\004\013\051\001\002\000\010\013\uffe5\015" +
    "\uffe5\017\uffe5\001\002\000\010\013\uffea\015\uffea\017\uffea" +
    "\001\002\000\010\013\uffee\015\uffee\017\uffee\001\002\000" +
    "\010\013\uffe6\015\uffe6\017\uffe6\001\002\000\010\013\uffe4" +
    "\015\uffe4\017\uffe4\001\002\000\010\013\uffe7\015\uffe7\017" +
    "\uffe7\001\002\000\010\013\ufff0\015\ufff2\017\ufff5\001\002" +
    "\000\004\013\ufff3\001\002\000\010\013\uffec\015\uffec\017" +
    "\uffec\001\002\000\010\013\uffe9\015\uffe9\017\uffe9\001\002" +
    "\000\010\013\uffeb\015\uffeb\017\uffeb\001\002\000\010\013" +
    "\uffed\015\uffed\017\uffed\001\002\000\010\013\uffe8\015\uffe8" +
    "\017\uffe8\001\002\000\010\013\uffef\015\uffef\017\uffef\001" +
    "\002\000\004\017\047\001\002\000\004\015\044\001\002" +
    "\000\032\007\041\010\026\011\037\012\034\013\036\014" +
    "\025\015\035\020\040\021\031\022\027\023\030\024\024" +
    "\001\002\000\006\013\ufff0\015\ufff2\001\002\000\004\013" +
    "\ufff1\001\002\000\032\007\041\010\026\011\037\012\034" +
    "\013\036\014\025\015\035\020\040\021\031\022\027\023" +
    "\030\024\024\001\002\000\004\013\ufff4\001\002\000\014" +
    "\003\ufff6\004\ufff6\005\ufff6\007\ufff6\025\ufff6\001\002\000" +
    "\004\016\053\001\002\000\026\006\063\011\067\020\070" +
    "\021\065\022\060\023\064\024\055\026\062\027\066\030" +
    "\057\001\002\000\030\006\063\011\067\013\110\020\070" +
    "\021\065\022\060\023\064\024\055\026\062\027\066\030" +
    "\057\001\002\000\026\006\uffd9\011\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\001" +
    "\002\000\030\006\uffd5\011\uffd5\013\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\001" +
    "\002\000\030\006\uffd2\011\uffd2\013\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\001" +
    "\002\000\026\006\uffdb\011\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\001\002\000" +
    "\030\006\uffe0\011\uffe0\013\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0\001\002\000" +
    "\030\006\uffd0\011\uffd0\013\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\001\002\000" +
    "\030\006\uffd3\011\uffd3\013\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3\001\002\000" +
    "\026\006\uffdf\011\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\026\uffdf\027\uffdf\030\uffdf\001\002\000\026\006" +
    "\uffd7\011\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\001\002\000\030\006\uffd1\011" +
    "\uffd1\013\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\001\002\000\006\005\010\007" +
    "\014\001\002\000\026\006\uffdd\011\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\001" +
    "\002\000\026\006\063\011\067\020\070\021\065\022\060" +
    "\023\064\024\055\026\062\027\066\030\057\001\002\000" +
    "\026\006\063\011\067\020\070\021\065\022\060\023\064" +
    "\024\055\026\062\027\066\030\057\001\002\000\030\006" +
    "\uffdc\011\uffdc\013\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\026\uffdc\027\uffdc\030\uffdc\001\002\000\004\012" +
    "\075\001\002\000\030\006\uffd4\011\uffd4\013\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\001\002\000\026\006\063\011\067\020\070\021\065" +
    "\022\060\023\064\024\055\026\062\027\066\030\057\001" +
    "\002\000\030\006\uffd6\011\uffd6\013\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6\001" +
    "\002\000\026\006\063\011\067\020\070\021\065\022\060" +
    "\023\064\024\055\026\062\027\066\030\057\001\002\000" +
    "\026\006\063\011\067\020\070\021\065\022\060\023\064" +
    "\024\055\026\062\027\066\030\057\001\002\000\030\006" +
    "\uffde\011\uffde\013\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\026\uffde\027\uffde\030\uffde\001\002\000\026\006" +
    "\063\011\067\020\070\021\065\022\060\023\064\024\055" +
    "\026\062\027\066\030\057\001\002\000\030\006\uffda\011" +
    "\uffda\013\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\026\uffda\027\uffda\030\uffda\001\002\000\026\006\063\011" +
    "\067\020\070\021\065\022\060\023\064\024\055\026\062" +
    "\027\066\030\057\001\002\000\030\006\uffd8\011\uffd8\013" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\001\002\000\030\006\uffe1\011\uffe1\013" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\001\002\000\014\003\uffe2\004\uffe2\005" +
    "\uffe2\007\uffe2\025\uffe2\001\002\000\006\005\000\007\000" +
    "\001\002\000\006\005\010\007\014\001\002\000\004\014" +
    "\uffcb\001\002\000\012\003\117\005\010\007\014\012\uffcc" +
    "\001\002\000\004\012\116\001\002\000\004\002\uffff\001" +
    "\002\000\010\005\010\007\014\012\uffcd\001\002\000\004" +
    "\012\uffce\001\002\000\004\012\uffcf\001\002\000\004\014" +
    "\123\001\002\000\004\006\124\001\002\000\004\013\uffca" +
    "\001\002\000\004\013\126\001\002\000\012\003\uffc9\005" +
    "\uffc9\007\uffc9\012\uffc9\001\002\000\004\025\ufffd\001\002" +
    "\000\012\004\013\005\010\007\014\025\ufffc\001\002\000" +
    "\004\025\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\006\004\005\005\014\010\011\017\010\001\001" +
    "\000\014\003\126\004\005\005\014\010\011\017\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\051" +
    "\001\001\000\002\001\001\000\004\021\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\017\001\001\000\004\022\020\001\001\000\002\001" +
    "\001\000\010\006\022\007\032\016\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\041\024\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\045\016\044\001\001" +
    "\000\004\024\042\001\001\000\002\001\001\000\004\016" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\053\012\060\013\055\001\001\000" +
    "\006\012\106\013\055\001\001\000\004\031\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\077\001\001\000\004\032\075\001\001\000" +
    "\002\001\001\000\004\017\073\001\001\000\004\027\070" +
    "\001\001\000\006\012\071\013\055\001\001\000\006\012" +
    "\072\013\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\076\013\055\001\001\000" +
    "\002\001\001\000\006\012\100\013\055\001\001\000\006" +
    "\012\101\013\055\001\001\000\002\001\001\000\006\012" +
    "\103\013\055\001\001\000\002\001\001\000\006\012\105" +
    "\013\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\111\001\001\000\010\014\114" +
    "\015\113\017\112\001\001\000\004\033\121\001\001\000" +
    "\010\014\117\015\113\017\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\120\015\113\017\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\130" +
    "\004\005\005\014\010\011\017\010\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ScannerC s;
    WordPainter painter;
    public ParserC(ScannerC s,WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left,sym.right);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserC$actions {
  private final ParserC parser;

  /** Constructor */
  CUP$ParserC$actions(ParserC parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserC$do_action_part00000000(
    int                        CUP$ParserC$act_num,
    java_cup.runtime.lr_parser CUP$ParserC$parser,
    java.util.Stack            CUP$ParserC$stack,
    int                        CUP$ParserC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserC$result;

      /* select the action based on the action number */
      switch (CUP$ParserC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		RESULT = start_val;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserC$parser.done_parsing();
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
painter.LIMIT(lleft,lright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= LBRACKET instructions LIMIT NT$0 analysis RBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= instruction error instructions 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instructions ::= instruction instructions 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instructions ::= instruction error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instructions ::= instruction 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= set 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= regex 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
		int rwleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int rwright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String rw = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
painter.RW(rwleft,rwright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;
		int rwleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int rwright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String rw = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
painter.VARIABLE(idleft,idright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("NT$2",16, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // set ::= RW_CONJ NT$1 COLON ids NT$2 PROMPT elements SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;
		int rwleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)).left;
		int rwright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)).right;
		String rw = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)).value;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("set",3, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-7)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              Object RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
painter.CHARACTER(startleft,startright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("NT$3",17, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // elements ::= character NT$3 TILDE character 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		painter.CHARACTER(endleft,endright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("elements",4, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // elements ::= specific 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("elements",4, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$4 ::= 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
painter.CHARACTER(chleft,chright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("NT$4",18, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // specific ::= character NT$4 COMMA specific 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("specific",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // specific ::= character 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		painter.CHARACTER(chleft,chright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("specific",5, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // character ::= CHAR 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		RESULT = ch;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // character ::= CHARNUM 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		RESULT = ch;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // character ::= LBRACKET 
            {
              String RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String lb = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		RESULT = lb;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // character ::= RBRACKET 
            {
              String RESULT =null;
		int rbleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String rb = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		RESULT = rb;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // character ::= SEMICOLON 
            {
              String RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		RESULT = sm;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // character ::= COLON 
            {
              String RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		RESULT = cn;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // character ::= COMMA 
            {
              String RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String cm = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		RESULT = cm;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // character ::= OR 
            {
              String RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		RESULT = or;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // character ::= POSITIVE 
            {
              String RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String pl = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		RESULT = pl;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // character ::= KLEENE 
            {
              String RESULT =null;
		int klleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int klright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String kl = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		RESULT = kl;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // character ::= OPTIONAL 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		RESULT = op;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // character ::= CONCAT 
            {
              String RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		RESULT = cc;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("character",12, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
painter.REGEX(idleft,idright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("NT$5",19, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // regex ::= ids NT$5 PROMPT operations SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)).value;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("regex",6, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operations ::= operations operation 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operations ::= operation 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$6 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
painter.OPERATOR(opleft,opright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("NT$6",20, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operation ::= CONCAT NT$6 operation operation 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$7 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
painter.OPERATOR(opleft,opright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("NT$7",21, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= OR NT$7 operation operation 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$8 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
painter.OPERATOR(opleft,opright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("NT$8",22, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= KLEENE NT$8 operation 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$9 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
painter.OPERATOR(opleft,opright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("NT$9",23, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= OPTIONAL NT$9 operation 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$10 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
painter.OPERATOR(opleft,opright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("NT$10",24, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= POSITIVE NT$10 operation 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operation ::= node 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // node ::= LBRACKET ids RBRACKET 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).right;
		String nd = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		painter.VARIABLEUSE(ndleft,ndright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("node",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // node ::= STRING 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String nd = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		painter.STRING(ndleft,ndright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("node",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // node ::= ENTER 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String nd = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		painter.SPECIALCHAR(ndleft,ndright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("node",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // node ::= DOUBLEQUOTE 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String nd = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		painter.SPECIALCHAR(ndleft,ndright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("node",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // node ::= SINGLEQUOTE 
            {
              Object RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String nd = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		painter.SPECIALCHAR(ndleft,ndright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("node",9, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // analysis ::= expression error analysis 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("analysis",10, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // analysis ::= expression analysis 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("analysis",10, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // analysis ::= expression error 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("analysis",10, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // analysis ::= expression 
            {
              Object RESULT =null;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("analysis",10, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$11 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
painter.REGEXUSE(idleft,idright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("NT$11",25, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
painter.STRING(strleft,strright);
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("NT$12",26, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= ids NT$11 COLON STRING NT$12 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.elementAt(CUP$ParserC$top-2)).value;

              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ParserC$stack.elementAt(CUP$ParserC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ids ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		RESULT = id;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("ids",13, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ids ::= CHAR 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserC$stack.peek()).value;
		RESULT = ch;
              CUP$ParserC$result = parser.getSymbolFactory().newSymbol("ids",13, ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserC$stack.peek()), RESULT);
            }
          return CUP$ParserC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserC$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserC$do_action(
    int                        CUP$ParserC$act_num,
    java_cup.runtime.lr_parser CUP$ParserC$parser,
    java.util.Stack            CUP$ParserC$stack,
    int                        CUP$ParserC$top)
    throws java.lang.Exception
    {
              return CUP$ParserC$do_action_part00000000(
                               CUP$ParserC$act_num,
                               CUP$ParserC$parser,
                               CUP$ParserC$stack,
                               CUP$ParserC$top);
    }
}

}
