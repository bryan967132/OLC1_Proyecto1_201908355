
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import Colors.Type;
import Components.Response;
import Components.ErrorS;
import Components.Expression;
import Components.Set;
import Tree.Node;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\005\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\005\010\000\002\005\006\000\002\010\005\000\002\010" +
    "\003\000\002\011\005\000\002\011\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\012\005\000\002\012\005\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\005\000\002" +
    "\012\003\000\002\013\005\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\006\004" +
    "\000\002\006\003\000\002\006\004\000\002\006\003\000" +
    "\002\007\006\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\012\004\001\002\000\016\003\016\004" +
    "\014\005\020\007\013\013\011\030\010\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\004\013" +
    "\114\001\002\000\012\003\103\005\020\007\013\013\ufffa" +
    "\001\002\000\004\002\uffff\001\002\000\016\003\100\004" +
    "\014\005\020\007\013\013\ufffc\030\077\001\002\000\006" +
    "\017\uffcf\021\uffcf\001\002\000\004\017\046\001\002\000" +
    "\004\021\021\001\002\000\016\003\ufff6\004\ufff6\005\ufff6" +
    "\007\ufff6\013\ufff6\030\ufff6\001\002\000\016\003\ufff8\004" +
    "\ufff8\005\ufff8\007\ufff8\013\ufff8\030\ufff8\001\002\000\006" +
    "\017\uffd0\021\uffd0\001\002\000\016\006\024\012\027\014" +
    "\030\031\023\032\031\033\026\001\002\000\016\016\045" +
    "\023\035\024\040\025\034\026\037\027\036\001\002\000" +
    "\020\015\uffd7\016\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\001\002\000\020\015\uffd9\016\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\001\002\000\020\015\uffdb" +
    "\016\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\001" +
    "\002\000\020\015\uffd8\016\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\001\002\000\004\005\043\001\002\000" +
    "\016\006\024\012\027\014\030\031\023\032\031\033\026" +
    "\001\002\000\020\015\uffd6\016\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\001\002\000\016\015\033\023\035" +
    "\024\040\025\034\026\037\027\036\001\002\000\020\015" +
    "\uffdc\016\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\001\002\000\020\015\uffde\016\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\001\002\000\016\006\024\012\027" +
    "\014\030\031\023\032\031\033\026\001\002\000\020\015" +
    "\uffdd\016\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\001\002\000\020\015\uffdf\016\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\001\002\000\016\006\024\012\027" +
    "\014\030\031\023\032\031\033\026\001\002\000\020\015" +
    "\uffe0\016\uffe0\023\035\024\uffe0\025\034\026\037\027\036" +
    "\001\002\000\020\015\uffe1\016\uffe1\023\uffe1\024\uffe1\025" +
    "\034\026\037\027\036\001\002\000\004\013\044\001\002" +
    "\000\020\015\uffda\016\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\001\002\000\016\003\ufff4\004\ufff4\005\ufff4" +
    "\007\ufff4\013\ufff4\030\ufff4\001\002\000\006\005\020\007" +
    "\013\001\002\000\004\021\050\001\002\000\036\007\060" +
    "\010\070\011\063\012\071\013\055\014\066\015\052\016" +
    "\057\017\056\020\067\023\051\024\054\025\061\026\064" +
    "\001\002\000\010\016\uffe4\020\uffe4\022\uffe4\001\002\000" +
    "\010\016\uffe9\020\uffe9\022\uffe9\001\002\000\010\016\ufff0" +
    "\020\ufff0\022\075\001\002\000\010\016\uffe5\020\uffe5\022" +
    "\uffe5\001\002\000\010\016\uffeb\020\uffeb\022\uffeb\001\002" +
    "\000\010\016\uffe7\020\uffe7\022\uffe7\001\002\000\010\016" +
    "\uffe8\020\uffe8\022\uffe8\001\002\000\010\016\uffef\020\uffef" +
    "\022\uffef\001\002\000\010\016\uffe3\020\uffe3\022\uffe3\001" +
    "\002\000\004\016\074\001\002\000\010\016\uffed\020\uffed" +
    "\022\uffed\001\002\000\010\016\uffe2\020\uffe2\022\uffe2\001" +
    "\002\000\006\016\ufff2\020\072\001\002\000\010\016\uffea" +
    "\020\uffea\022\uffea\001\002\000\010\016\uffe6\020\uffe6\022" +
    "\uffe6\001\002\000\010\016\uffee\020\uffee\022\uffee\001\002" +
    "\000\010\016\uffec\020\uffec\022\uffec\001\002\000\036\007" +
    "\060\010\070\011\063\012\071\013\055\014\066\015\052" +
    "\016\057\017\056\020\067\023\051\024\054\025\061\026" +
    "\064\001\002\000\006\016\ufff1\020\ufff1\001\002\000\016" +
    "\003\ufff5\004\ufff5\005\ufff5\007\ufff5\013\ufff5\030\ufff5\001" +
    "\002\000\036\007\060\010\070\011\063\012\071\013\055" +
    "\014\066\015\052\016\057\017\056\020\067\023\051\024" +
    "\054\025\061\026\064\001\002\000\004\016\ufff3\001\002" +
    "\000\012\003\103\005\020\007\013\013\ufffd\001\002\000" +
    "\016\003\ufff7\004\ufff7\005\ufff7\007\ufff7\013\ufff7\030\ufff7" +
    "\001\002\000\016\003\ufff9\004\ufff9\005\ufff9\007\ufff9\013" +
    "\ufff9\030\ufff9\001\002\000\004\017\110\001\002\000\012" +
    "\003\uffd2\005\uffd2\007\uffd2\013\uffd2\001\002\000\012\003" +
    "\106\005\020\007\013\013\ufffe\001\002\000\012\003\uffd4" +
    "\005\uffd4\007\uffd4\013\uffd4\001\002\000\012\003\uffd3\005" +
    "\uffd3\007\uffd3\013\uffd3\001\002\000\012\003\uffd5\005\uffd5" +
    "\007\uffd5\013\uffd5\001\002\000\004\006\111\001\002\000" +
    "\004\016\112\001\002\000\012\003\uffd1\005\uffd1\007\uffd1" +
    "\013\uffd1\001\002\000\012\003\106\005\020\007\013\013" +
    "\ufffb\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\002\004\001\001\000\012\003\006\004" +
    "\011\005\016\015\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\112\007\104\015" +
    "\101\001\001\000\002\001\001\000\006\005\100\015\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\021\013\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\031\013\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\041\013\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\040\013\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\046" +
    "\001\001\000\002\001\001\000\010\010\061\011\064\014" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\075\001\001" +
    "\000\002\001\001\000\010\006\103\007\104\015\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\106\015\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\106\015\101\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Scanner s;
    private int id = 0;
    private int leaf = 1;
    private int errors = 0;
    public ArrayList<Response> errorsS = new ArrayList<>();
    public Map<String, Set> sets = new TreeMap<>();
    public Map<String, Node> regexs = new TreeMap<>();
    public ArrayList<Expression> expressions = new ArrayList<>();
    public Parser(Scanner s) {
        super(s);
        this.s = s;
    }
    public void syntax_error(Symbol sym) {
        errorsS.add(new Response(new ErrorS(sym.left, sym.right, sym.value, Sym.terminalNames[sym.sym])));
        errors ++;
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        errorsS.add(new Response("Error Sintáctico sin recuperar."));
    }
    public boolean isSuccessExecution() {
        return !(errors > 0);
    }
    public boolean thereAreTrees() {
        return regexs.size() > 0;
    }
    public boolean thereAreExpressions() {
        return expressions.size() > 0;
    }
    public String getErrors() {
        return errorsS.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    private void addSet(String set, Set elements) {
        elements.id = set;
        sets.put(set, elements);
    }
    private void addTree(String regex, Node op) {
        Node root = new Node(this.id + 1, ".", Type.CONCAT);
        root.left = op;
        root.right = new Node(this.id, "#", Type.LEAF, Type.END);
        root.right.anulable = false;
        root.right.i = this.leaf;
        root.anulable = root.left.anulable && root.right.anulable;
        regexs.put(regex, root);
        this.id = 0;
        this.leaf = 1;
    }
    private Node buildTree(String value, Node left, Node right, boolean anulable, Type type) {
        Node root = new Node(id, value, type);
        root.anulable = anulable;
        root.left = left;
        root.right = right;
        id ++;
        return root;
    }
    private Node buildTree(String op, Type type, Type type1) {
        Node root = new Node(id, op, type, type1);
        root.anulable = false;
        root.i = leaf;
        id ++;
        leaf ++;
        return root;
    }
    private void addExpression(String exp, String string) {
        expressions.add(new Expression(exp, string));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INI EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INI ::= TK_lbr CODE TK_rbr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INI ::= TK_lbr TK_rbr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODE ::= DECLARATIONS TK_limit EVALUATIONS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODE ::= DECLARATIONS TK_limit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CODE ::= DECLARATIONS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODE ::= TK_limit EVALUATIONS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CODE ::= TK_limit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARATIONS ::= DECLARATIONS DECLARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARATIONS ::= DECLARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARATIONS ::= DECLARATIONS error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARATIONS ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARATION ::= RW_CONJ TK_colon IDS TK_prompt ELEMENTS TK_semicolon 
            {
              Object RESULT =null;
		int setleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String set = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elemleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Set elem = (Set)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		addSet(set, elem); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARATION ::= IDS TK_prompt OPERATION TK_semicolon 
            {
              Object RESULT =null;
		int regexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int regexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String regex = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node op = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		addTree(regex, op);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ELEMENTS ::= CHARACTER TK_tilde CHARACTER 
            {
              Set RESULT =null;
		int ch1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ch1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ch1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ch2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ch2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Set(ch1.charAt(0), ch2.charAt(0));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELEMENTS ::= SPECIFIC 
            {
              Set RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Character> sp = (ArrayList<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Set(sp);                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SPECIFIC ::= SPECIFIC TK_comma CHARACTER 
            {
              ArrayList<Character> RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Character> sp = (ArrayList<Character>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		sp.add(ch.charAt(0)); RESULT = sp;                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPECIFIC",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SPECIFIC ::= CHARACTER 
            {
              ArrayList<Character> RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(ch.charAt(0)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SPECIFIC",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CHARACTER ::= TK_char 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CHARACTER ::= TK_charnum 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CHARACTER ::= TK_charascii 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CHARACTER ::= TK_lbr 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CHARACTER ::= TK_rbr 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CHARACTER ::= TK_lpar 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CHARACTER ::= TK_rpar 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CHARACTER ::= TK_semicolon 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CHARACTER ::= TK_colon 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CHARACTER ::= TK_comma 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CHARACTER ::= TK_or 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CHARACTER ::= TK_concat 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CHARACTER ::= TK_positive 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CHARACTER ::= TK_kleene 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CHARACTER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERATION ::= OPERATION TK_concat OPERATION 
            {
              Node RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node op1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node op2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = buildTree(".", op1, op2,  op1.anulable && op2.anulable, Type.CONCAT  );
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERATION ::= OPERATION TK_or OPERATION 
            {
              Node RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node op1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node op2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = buildTree("|", op1, op2,  op1.anulable || op2.anulable, Type.OR      );
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERATION ::= OPERATION TK_kleene 
            {
              Node RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node op1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = buildTree("*", op1, null, true,                         Type.KLEENE  );
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERATION ::= OPERATION TK_positive 
            {
              Node RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node op1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = buildTree("+", op1, null, op1.anulable,                 Type.POSITIVE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERATION ::= OPERATION TK_optional 
            {
              Node RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node op1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = buildTree("?", op1, null, true,                         Type.OPTIONAL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERATION ::= TK_lpar OPERATION TK_rpar 
            {
              Node RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node op = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = op;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERATION ::= OPERAND 
            {
              Node RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node op = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERAND ::= TK_lbr TK_id TK_rbr 
            {
              Node RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = buildTree(op, Type.LEAF, Type.ID         );
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERAND ::= TK_str 
            {
              Node RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = buildTree(op, Type.LEAF, Type.STRING     );
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERAND ::= TK_newline 
            {
              Node RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = buildTree(op, Type.LEAF, Type.ENTER      );
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERAND ::= TK_singlequ 
            {
              Node RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = buildTree(op, Type.LEAF, Type.SINGLEQUOTE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERAND ::= TK_doublequ 
            {
              Node RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = buildTree(op, Type.LEAF, Type.DOUBLEQUOTE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERAND",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EVALUATIONS ::= EVALUATIONS EVALUATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EVALUATIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EVALUATIONS ::= EVALUATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EVALUATIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EVALUATIONS ::= EVALUATIONS error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EVALUATIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EVALUATIONS ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EVALUATIONS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EVALUATION ::= IDS TK_colon TK_str TK_semicolon 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		addExpression(exp, str);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EVALUATION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IDS ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IDS ::= TK_char 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
