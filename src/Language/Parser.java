
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.ArrayList;
import java_cup.runtime.*;
import Colors.Token;
import Colors.Type;
import Components.ErrorS;
import Components.Instruction;
import Controller.Expression;
import Controller.Regex;
import Controller.Set;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\005\000\002\002" +
    "\002\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\003\000\002\005\002\000" +
    "\002\006\005\000\002\006\004\000\002\006\004\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\010\000\002\011\005\000\002\011\003\000\002\023\002" +
    "\000\002\012\006\000\002\012\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\013\006\000\002\014\004\000" +
    "\002\014\003\000\002\024\002\000\002\015\006\000\002" +
    "\025\002\000\002\015\006\000\002\026\002\000\002\015" +
    "\005\000\002\027\002\000\002\015\005\000\002\030\002" +
    "\000\002\015\005\000\002\015\003\000\002\016\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\017\003\000\002\020\006\000\002\022\003" +
    "\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\006\002\uffff\011\005\001\002\000\004\002" +
    "\126\001\002\000\012\004\010\005\013\007\016\012\ufffd" +
    "\001\002\000\004\016\070\001\002\000\016\003\066\004" +
    "\010\005\013\007\016\012\ufff5\025\ufff5\001\002\000\004" +
    "\014\034\001\002\000\006\012\ufffb\025\020\001\002\000" +
    "\004\012\017\001\002\000\010\012\uffc8\014\uffc8\016\uffc8" +
    "\001\002\000\016\003\ufff3\004\ufff3\005\ufff3\007\ufff3\012" +
    "\ufff3\025\ufff3\001\002\000\016\003\ufff4\004\ufff4\005\ufff4" +
    "\007\ufff4\012\ufff4\025\ufff4\001\002\000\010\012\uffc7\014" +
    "\uffc7\016\uffc7\001\002\000\004\002\000\001\002\000\010" +
    "\005\013\007\016\012\ufff9\001\002\000\004\012\ufffe\001" +
    "\002\000\004\014\031\001\002\000\004\012\ufffc\001\002" +
    "\000\012\003\026\005\013\007\016\012\uffca\001\002\000" +
    "\004\012\ufffa\001\002\000\010\005\013\007\016\012\uffcb" +
    "\001\002\000\004\012\uffcc\001\002\000\004\012\uffcd\001" +
    "\002\000\004\006\032\001\002\000\004\013\033\001\002" +
    "\000\012\003\uffc9\005\uffc9\007\uffc9\012\uffc9\001\002\000" +
    "\006\005\013\007\016\001\002\000\004\016\036\001\002" +
    "\000\032\007\055\010\042\011\053\012\050\013\052\014" +
    "\041\015\051\020\054\021\045\022\043\023\044\024\040" +
    "\001\002\000\004\013\064\001\002\000\010\013\uffe2\015" +
    "\uffe2\017\uffe2\001\002\000\010\013\uffe7\015\uffe7\017\uffe7" +
    "\001\002\000\010\013\uffeb\015\uffeb\017\uffeb\001\002\000" +
    "\010\013\uffe3\015\uffe3\017\uffe3\001\002\000\010\013\uffe1" +
    "\015\uffe1\017\uffe1\001\002\000\010\013\uffe4\015\uffe4\017" +
    "\uffe4\001\002\000\010\013\uffed\015\uffef\017\057\001\002" +
    "\000\004\013\ufff0\001\002\000\010\013\uffe9\015\uffe9\017" +
    "\uffe9\001\002\000\010\013\uffe6\015\uffe6\017\uffe6\001\002" +
    "\000\010\013\uffe8\015\uffe8\017\uffe8\001\002\000\010\013" +
    "\uffea\015\uffea\017\uffea\001\002\000\010\013\uffe5\015\uffe5" +
    "\017\uffe5\001\002\000\010\013\uffec\015\uffec\017\uffec\001" +
    "\002\000\004\015\061\001\002\000\032\007\055\010\042" +
    "\011\053\012\050\013\052\014\041\015\051\020\054\021" +
    "\045\022\043\023\044\024\040\001\002\000\004\013\ufff1" +
    "\001\002\000\032\007\055\010\042\011\053\012\050\013" +
    "\052\014\041\015\051\020\054\021\045\022\043\023\044" +
    "\024\040\001\002\000\006\013\uffed\015\uffef\001\002\000" +
    "\004\013\uffee\001\002\000\016\003\ufff2\004\ufff2\005\ufff2" +
    "\007\ufff2\012\ufff2\025\ufff2\001\002\000\006\012\ufff7\025" +
    "\ufff7\001\002\000\014\004\010\005\013\007\016\012\ufff6" +
    "\025\ufff6\001\002\000\006\012\ufff8\025\ufff8\001\002\000" +
    "\026\006\101\011\104\020\105\021\102\022\076\023\100" +
    "\024\072\026\077\027\103\030\074\001\002\000\030\006" +
    "\101\011\104\013\125\020\105\021\102\022\076\023\100" +
    "\024\072\026\077\027\103\030\074\001\002\000\026\006" +
    "\uffd7\011\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\001\002\000\030\006\uffd3\011" +
    "\uffd3\013\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\001\002\000\030\006\uffd0\011" +
    "\uffd0\013\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\001\002\000\030\006\uffde\011" +
    "\uffde\013\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\026\uffde\027\uffde\030\uffde\001\002\000\026\006\uffd9\011" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\001\002\000\030\006\uffce\011\uffce\013" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026\uffce" +
    "\027\uffce\030\uffce\001\002\000\026\006\uffdd\011\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\001\002\000\030\006\uffd1\011\uffd1\013\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\001\002\000\026\006\uffd5\011\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\001\002\000\030\006\uffcf\011\uffcf\013\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\001\002\000\006\005\013\007\016\001\002\000\026\006" +
    "\uffdb\011\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\001\002\000\026\006\101\011" +
    "\104\020\105\021\102\022\076\023\100\024\072\026\077" +
    "\027\103\030\074\001\002\000\026\006\101\011\104\020" +
    "\105\021\102\022\076\023\100\024\072\026\077\027\103" +
    "\030\074\001\002\000\030\006\uffda\011\uffda\013\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\026\uffda\027\uffda" +
    "\030\uffda\001\002\000\004\012\112\001\002\000\030\006" +
    "\uffd2\011\uffd2\013\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\026\uffd2\027\uffd2\030\uffd2\001\002\000\026\006" +
    "\101\011\104\020\105\021\102\022\076\023\100\024\072" +
    "\026\077\027\103\030\074\001\002\000\030\006\uffd4\011" +
    "\uffd4\013\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\001\002\000\026\006\101\011" +
    "\104\020\105\021\102\022\076\023\100\024\072\026\077" +
    "\027\103\030\074\001\002\000\026\006\101\011\104\020" +
    "\105\021\102\022\076\023\100\024\072\026\077\027\103" +
    "\030\074\001\002\000\030\006\uffdc\011\uffdc\013\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\001\002\000\026\006\101\011\104\020\105\021" +
    "\102\022\076\023\100\024\072\026\077\027\103\030\074" +
    "\001\002\000\030\006\uffd8\011\uffd8\013\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\001\002\000\026\006\101\011\104\020\105\021\102\022" +
    "\076\023\100\024\072\026\077\027\103\030\074\001\002" +
    "\000\030\006\uffd6\011\uffd6\013\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6\001\002" +
    "\000\030\006\uffdf\011\uffdf\013\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf\001\002" +
    "\000\016\003\uffe0\004\uffe0\005\uffe0\007\uffe0\012\uffe0\025" +
    "\uffe0\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\004\002\003\001\001\000\002\001\001\000" +
    "\016\003\011\006\010\007\006\010\014\013\013\022\005" +
    "\001\001\000\002\001\001\000\014\006\064\007\006\010" +
    "\014\013\013\022\005\001\001\000\002\001\001\000\004" +
    "\004\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\022\017\024\020\023\022\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\026\020\023\022\021\001\001\000\002\001" +
    "\001\000\010\017\027\020\023\022\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\034\001\001\000\002" +
    "\001\001\000\010\011\036\012\046\021\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\057\001\001\000\002\001\001\000\006\012" +
    "\062\021\061\001\001\000\004\023\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\066\007\006\010\014\013\013\022\005\001\001\000\002" +
    "\001\001\000\010\014\070\015\074\016\072\001\001\000" +
    "\006\015\123\016\072\001\001\000\004\027\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\117\001\001\000\002\001\001\000\004\024\114" +
    "\001\001\000\002\001\001\000\004\030\112\001\001\000" +
    "\002\001\001\000\004\022\110\001\001\000\004\025\105" +
    "\001\001\000\006\015\106\016\072\001\001\000\006\015" +
    "\107\016\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\113\016\072\001\001\000" +
    "\002\001\001\000\006\015\115\016\072\001\001\000\006" +
    "\015\116\016\072\001\001\000\002\001\001\000\006\015" +
    "\120\016\072\001\001\000\002\001\001\000\006\015\122" +
    "\016\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Scanner s;
    public Parser(Scanner s) {
        super(s);
        this.s = s;
    }

    ArrayList<Instruction> flowExe = new ArrayList<>();
    ArrayList<Instruction> errors = new ArrayList<>();
    ArrayList<Expression> expressions = new ArrayList<>();
    ArrayList<Regex> regexs = new ArrayList<>();
    ArrayList<Set> sets = new ArrayList<>();
    Expression expression = new Expression();
    Regex regex = new Regex();
    Set set = new Set();
    public void syntax_error(Symbol sym) {
        errors.add(
            new Instruction(
                new ErrorS(
                    sym.left,
                    sym.right,
                    sym.value,
                    Sym.terminalNames[sym.sym]
                )
            )
        );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        errors.add(
            new Instruction("Unrecovered Syntax Error.")
        );
    }
    public ArrayList<Instruction> getExcecution() {
        return flowExe;
    }
    public String getStrExecution() {
        String exe = "";
        for(int i = 0; i < flowExe.size(); i ++) {
            exe += flowExe.get(i) + "\n";
        }
        if(errors.size() > 0) {
            for(int i = 0; i < errors.size(); i ++) {
                exe += errors.get(i) + "\n";
            }
            return exe + "\n";
        }
        return exe + "SUCCESSFULLY RUN";
    }
    public String getStrErrors() {
        String exe = "";
        for(int i = 0; i < errors.size(); i ++) {
            exe += "-> " + errors.get(i) + "\n";
        }
        return exe + "\n";
    }
    public boolean isSuccessExecution() {
        if(errors.size() > 0) {
            return false;
        }
        return true;
    }
    private void addRange(String start,String end) {
        set.startChar = start.charAt(0);
        set.endChar = end.charAt(0);
    }
    private void addSpecific(String ch) {
        set.specifics.add(ch.charAt(0));
    }
    private void addSet(String id) {
        set.id = id;
        sets.add(set);
        flowExe.add(new Instruction(set));
        set = new Set();
    }
    public ArrayList<Set> getSets() {
        return sets;
    }
    public String getStrSets() {
        String str = "";
        for(Set set : sets) {
            str += set + "\n";
        }
        return str;
    }
    private void addElement(String element,Type type) {
        regex.expression.push(new Token(element,type));
    }
    private void addRegex(String id) {
        regex.id = id;
        regexs.add(regex);
        regex.expression.add(0,new Token(".",Type.CONCAT));
        regex.expression.push(new Token("#",Type.CONCAT));
        flowExe.add(new Instruction(regex));
        regex = new Regex();
    }
    public ArrayList<Regex> getRegexs() {
        return regexs;
    }
    public String getStrRegexs() {
        String str = "";
        for(Regex regex : regexs) {
            str += regex + "\n";
        }
        return str;
    }
    private void addExpression(String id,String string) {
        expression.id = id;
        expression.string = string;
        expressions.add(expression);
        flowExe.add(new Instruction(expression));
        expression = new Expression();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= LBRACKET body RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body ::= instructions declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= LIMIT evaluations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // evaluations ::= analysis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // evaluations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instructions ::= instruction error instructions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instructions ::= instruction instructions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instructions ::= instruction error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instructions ::= instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= set 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruction ::= regex 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // set ::= RW_CONJ COLON ids PROMPT elements SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		addSet(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // elements ::= character TILDE character 
            {
              Object RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addRange(start,end);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // elements ::= specific 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::= 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
addSpecific(ch);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // specific ::= character NT$0 COMMA specific 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specific",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // specific ::= character 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addSpecific(ch);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("specific",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // character ::= CHAR 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // character ::= CHARNUM 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // character ::= LBRACKET 
            {
              String RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = lb;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // character ::= RBRACKET 
            {
              String RESULT =null;
		int rbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = rb;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // character ::= SEMICOLON 
            {
              String RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = sm;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // character ::= COLON 
            {
              String RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = cn;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // character ::= COMMA 
            {
              String RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = cm;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // character ::= OR 
            {
              String RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = or;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // character ::= POSITIVE 
            {
              String RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String pl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = pl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // character ::= KLEENE 
            {
              String RESULT =null;
		int klleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int klright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String kl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = kl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // character ::= OPTIONAL 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = op;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // character ::= CONCAT 
            {
              String RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = cc;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // regex ::= ids PROMPT operations SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		addRegex(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("regex",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operations ::= operations operation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operations",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operations ::= operation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operations",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$1 ::= 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
addElement(cc,Type.CONCAT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= CONCAT NT$1 operation operation 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$2 ::= 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
addElement(or,Type.OR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= OR NT$2 operation operation 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$3 ::= 
            {
              Object RESULT =null;
		int klleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int klright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String kl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
addElement(kl,Type.KLEENE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= KLEENE NT$3 operation 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int klleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int klright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String kl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$4 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
addElement(op,Type.OPTIONAL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= OPTIONAL NT$4 operation 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$5 ::= 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String pl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
addElement(pl,Type.POSITIVE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operation ::= POSITIVE NT$5 operation 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String pl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operation ::= node 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // node ::= LBRACKET ids RBRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		addElement(id,Type.ID);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // node ::= STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		if(str.equals("\"\"")) {syntax_error(((java_cup.runtime.Symbol) CUP$Parser$stack.peek()));return ((java_cup.runtime.Symbol) CUP$Parser$stack.peek());}addElement(str,Type.STRING);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // node ::= ENTER 
            {
              Object RESULT =null;
		int enterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String enter = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addElement(enter,Type.ENTER);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // node ::= DOUBLEQUOTE 
            {
              Object RESULT =null;
		int dqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dq = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addElement(dq,Type.DOUBLEQUOTE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // node ::= SINGLEQUOTE 
            {
              Object RESULT =null;
		int sqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sq = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addElement(sq,Type.SINGLEQUOTE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("node",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // analysis ::= expression error analysis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("analysis",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // analysis ::= expression analysis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("analysis",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // analysis ::= expression error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("analysis",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // analysis ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("analysis",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= ids COLON STRING SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		addExpression(id,str);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ids ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ids ::= CHAR 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ch;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
