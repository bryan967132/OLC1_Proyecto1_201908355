
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java_cup.runtime.*;
import Colors.WordPainter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserF extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserF() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserF(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserF(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\005\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\010\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\017\002\000\002\020\002\000\002\005" +
    "\012\000\002\021\002\000\002\005\007\000\002\022\002" +
    "\000\002\011\006\000\002\011\003\000\002\012\005\000" +
    "\002\012\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\023\002\000\002" +
    "\013\006\000\002\024\002\000\002\013\006\000\002\025" +
    "\002\000\002\013\005\000\002\026\002\000\002\013\005" +
    "\000\002\027\002\000\002\013\005\000\002\013\003\000" +
    "\002\014\005\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\006\004\000\002\006" +
    "\003\000\002\006\004\000\002\006\003\000\002\030\002" +
    "\000\002\031\002\000\002\007\010\000\002\016\003\000" +
    "\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\004\012\004\001\002\000\016\003\017\004" +
    "\015\005\021\007\014\013\012\030\011\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\012\003" +
    "\117\005\021\007\014\013\ufffa\001\002\000\004\013\131" +
    "\001\002\000\012\003\ufff9\005\ufff9\007\ufff9\013\ufff9\001" +
    "\002\000\004\002\uffff\001\002\000\016\003\114\004\015" +
    "\005\021\007\014\013\ufffc\030\011\001\002\000\010\013" +
    "\uffc4\017\uffc4\021\uffc4\001\002\000\004\017\ufff4\001\002" +
    "\000\004\021\ufff1\001\002\000\016\003\ufff5\004\ufff5\005" +
    "\ufff5\007\ufff5\013\ufff5\030\ufff5\001\002\000\016\003\ufff7" +
    "\004\ufff7\005\ufff7\007\ufff7\013\ufff7\030\ufff7\001\002\000" +
    "\010\013\uffc5\017\uffc5\021\uffc5\001\002\000\004\021\023" +
    "\001\002\000\026\006\025\012\036\023\024\024\026\025" +
    "\030\026\033\027\032\031\031\032\035\033\027\001\002" +
    "\000\026\006\uffda\012\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\031\uffda\032\uffda\033\uffda\001\002\000\030" +
    "\006\uffd0\012\uffd0\016\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\001\002\000\026" +
    "\006\uffdc\012\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\001\002\000\030\006\uffcf" +
    "\012\uffcf\016\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\001\002\000\026\006\uffd6" +
    "\012\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\001\002\000\030\006\uffce\012\uffce" +
    "\016\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\031" +
    "\uffce\032\uffce\033\uffce\001\002\000\026\006\uffd4\012\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\001\002\000\026\006\uffd8\012\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\001\002\000\004\016\042\001\002\000\030\006\uffcd" +
    "\012\uffcd\016\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\001\002\000\006\005\021" +
    "\007\014\001\002\000\030\006\uffd2\012\uffd2\016\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\001\002\000\004\013\041\001\002\000\030\006" +
    "\uffd1\012\uffd1\016\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\031\uffd1\032\uffd1\033\uffd1\001\002\000\016\003" +
    "\ufff0\004\ufff0\005\ufff0\007\ufff0\013\ufff0\030\ufff0\001\002" +
    "\000\026\006\025\012\036\023\024\024\026\025\030\026" +
    "\033\027\032\031\031\032\035\033\027\001\002\000\030" +
    "\006\uffd7\012\uffd7\016\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\031\uffd7\032\uffd7\033\uffd7\001\002\000\026" +
    "\006\025\012\036\023\024\024\026\025\030\026\033\027" +
    "\032\031\031\032\035\033\027\001\002\000\030\006\uffd3" +
    "\012\uffd3\016\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\001\002\000\026\006\025" +
    "\012\036\023\024\024\026\025\030\026\033\027\032\031" +
    "\031\032\035\033\027\001\002\000\030\006\uffd5\012\uffd5" +
    "\016\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\001\002\000\026\006\025\012\036" +
    "\023\024\024\026\025\030\026\033\027\032\031\031\032" +
    "\035\033\027\001\002\000\026\006\025\012\036\023\024" +
    "\024\026\025\030\026\033\027\032\031\031\032\035\033" +
    "\027\001\002\000\030\006\uffdb\012\uffdb\016\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\001\002\000\026\006\025\012\036\023\024\024\026" +
    "\025\030\026\033\027\032\031\031\032\035\033\027\001" +
    "\002\000\026\006\025\012\036\023\024\024\026\025\030" +
    "\026\033\027\032\031\031\032\035\033\027\001\002\000" +
    "\030\006\uffd9\012\uffd9\016\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\031\uffd9\032\uffd9\033\uffd9\001\002\000" +
    "\004\017\060\001\002\000\006\005\021\007\014\001\002" +
    "\000\004\021\ufff3\001\002\000\004\021\063\001\002\000" +
    "\036\007\073\010\103\011\076\012\104\013\070\014\101" +
    "\015\065\016\072\017\071\020\102\023\064\024\067\025" +
    "\074\026\077\001\002\000\010\016\uffdf\020\uffdf\022\uffdf" +
    "\001\002\000\010\016\uffe4\020\uffe4\022\uffe4\001\002\000" +
    "\010\016\uffeb\020\uffeb\022\uffef\001\002\000\010\016\uffe0" +
    "\020\uffe0\022\uffe0\001\002\000\010\016\uffe6\020\uffe6\022" +
    "\uffe6\001\002\000\010\016\uffe2\020\uffe2\022\uffe2\001\002" +
    "\000\010\016\uffe3\020\uffe3\022\uffe3\001\002\000\010\016" +
    "\uffea\020\uffea\022\uffea\001\002\000\010\016\uffde\020\uffde" +
    "\022\uffde\001\002\000\004\016\107\001\002\000\010\016" +
    "\uffe8\020\uffe8\022\uffe8\001\002\000\010\016\uffdd\020\uffdd" +
    "\022\uffdd\001\002\000\006\016\uffed\020\105\001\002\000" +
    "\010\016\uffe5\020\uffe5\022\uffe5\001\002\000\010\016\uffe1" +
    "\020\uffe1\022\uffe1\001\002\000\010\016\uffe9\020\uffe9\022" +
    "\uffe9\001\002\000\010\016\uffe7\020\uffe7\022\uffe7\001\002" +
    "\000\036\007\073\010\103\011\076\012\104\013\070\014" +
    "\101\015\065\016\072\017\071\020\102\023\064\024\067" +
    "\025\074\026\077\001\002\000\006\016\uffec\020\uffec\001" +
    "\002\000\016\003\ufff2\004\ufff2\005\ufff2\007\ufff2\013\ufff2" +
    "\030\ufff2\001\002\000\004\022\111\001\002\000\036\007" +
    "\073\010\103\011\076\012\104\013\070\014\101\015\065" +
    "\016\072\017\071\020\102\023\064\024\067\025\074\026" +
    "\077\001\002\000\004\016\uffee\001\002\000\012\003\117" +
    "\005\021\007\014\013\ufffd\001\002\000\016\003\ufff6\004" +
    "\ufff6\005\ufff6\007\ufff6\013\ufff6\030\ufff6\001\002\000\016" +
    "\003\ufff8\004\ufff8\005\ufff8\007\ufff8\013\ufff8\030\ufff8\001" +
    "\002\000\004\017\uffc8\001\002\000\012\003\uffc9\005\uffc9" +
    "\007\uffc9\013\uffc9\001\002\000\012\003\122\005\021\007" +
    "\014\013\ufffe\001\002\000\012\003\uffcb\005\uffcb\007\uffcb" +
    "\013\uffcb\001\002\000\012\003\uffca\005\uffca\007\uffca\013" +
    "\uffca\001\002\000\012\003\uffcc\005\uffcc\007\uffcc\013\uffcc" +
    "\001\002\000\004\017\125\001\002\000\004\006\126\001" +
    "\002\000\004\016\uffc7\001\002\000\004\016\130\001\002" +
    "\000\012\003\uffc6\005\uffc6\007\uffc6\013\uffc6\001\002\000" +
    "\004\002\000\001\002\000\012\003\122\005\021\007\014" +
    "\013\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\004\002\004\001\001\000\014\003\007\004" +
    "\012\005\017\010\006\016\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\131\007\120\016\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\114\010\112\016\015\001\001\000\002\001" +
    "\001\000\004\017\056\001\001\000\004\021\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\033\014\036\001\001\000\004" +
    "\024\053\001\001\000\002\001\001\000\004\023\050\001" +
    "\001\000\002\001\001\000\004\026\046\001\001\000\002" +
    "\001\001\000\004\027\044\001\001\000\004\025\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\043\014\036\001\001" +
    "\000\002\001\001\000\006\013\045\014\036\001\001\000" +
    "\002\001\001\000\006\013\047\014\036\001\001\000\002" +
    "\001\001\000\006\013\051\014\036\001\001\000\006\013" +
    "\052\014\036\001\001\000\002\001\001\000\006\013\054" +
    "\014\036\001\001\000\006\013\055\014\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\060\001\001" +
    "\000\004\020\061\001\001\000\002\001\001\000\010\011" +
    "\074\012\077\015\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\111\001\001\000\002\001" +
    "\001\000\010\006\117\007\120\016\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\123\001\001\000" +
    "\002\001\001\000\006\007\122\016\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\122\016\115\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserF$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserF$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserF$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ScannerF s;
    int index;
    WordPainter painter;
    public ParserF(ScannerF s,WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left,sym.right);
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserF$actions {
  private final ParserF parser;

  /** Constructor */
  CUP$ParserF$actions(ParserF parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action_part00000000(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserF$result;

      /* select the action based on the action number */
      switch (CUP$ParserF$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INI EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		RESULT = start_val;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserF$parser.done_parsing();
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INI ::= TK_lbr CODE TK_rbr 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INI ::= TK_lbr TK_rbr 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODE ::= DECLARATIONS LIMIT EVALUATIONS 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODE ::= DECLARATIONS LIMIT 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CODE ::= DECLARATIONS 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODE ::= LIMIT EVALUATIONS 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CODE ::= LIMIT 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CODE",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LIMIT ::= TK_limit 
            {
              Object RESULT =null;
		int limleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int limright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String lim = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.LIMIT(limleft,limright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LIMIT",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARATIONS ::= DECLARATIONS DECLARATION 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARATIONS ::= DECLARATION 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARATIONS ::= DECLARATIONS error 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARATIONS ::= error 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Object RESULT =null;
		int conjleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int conjright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String conj = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW(conjleft,conjright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int conjleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int conjright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String conj = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.VARIABLE(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$1",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARATION ::= RW_CONJ NT$0 TK_colon IDS NT$1 TK_prompt ELEMENTS TK_semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int conjleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)).left;
		int conjright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)).right;
		String conj = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.REGEX(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$2",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARATION ::= IDS NT$2 TK_prompt OPERATION TK_semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$3 ::= 
            {
              Object RESULT =null;
		int ch1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int ch1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.CHARACTER(ch1left,ch1right);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$3",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELEMENTS ::= CHARACTER NT$3 TK_tilde CHARACTER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int ch1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int ch1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String ch1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int ch2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int ch2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.CHARACTER(ch2left,ch2right);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELEMENTS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELEMENTS ::= SPECIFIC 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ELEMENTS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SPECIFIC ::= SPECIFIC TK_comma CHARACTER 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.CHARACTER(chleft,chright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SPECIFIC",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SPECIFIC ::= CHARACTER 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.CHARACTER(chleft,chright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SPECIFIC",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CHARACTER ::= TK_char 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = ch;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CHARACTER",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CHARACTER ::= TK_charnum 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = ch;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CHARACTER",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CHARACTER ::= TK_charascii 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = ch;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CHARACTER",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CHARACTER ::= TK_lbr 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = ch;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CHARACTER",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CHARACTER ::= TK_rbr 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = ch;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CHARACTER",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CHARACTER ::= TK_lpar 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = ch;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CHARACTER",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CHARACTER ::= TK_rpar 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = ch;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CHARACTER",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CHARACTER ::= TK_semicolon 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = ch;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CHARACTER",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CHARACTER ::= TK_colon 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = ch;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CHARACTER",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CHARACTER ::= TK_comma 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = ch;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CHARACTER",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CHARACTER ::= TK_or 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = ch;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CHARACTER",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CHARACTER ::= TK_concat 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = ch;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CHARACTER",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CHARACTER ::= TK_positive 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = ch;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CHARACTER",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CHARACTER ::= TK_kleene 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = ch;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CHARACTER",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$4 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.OPERATOR(opleft,opright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$4",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERATION ::= TK_or NT$4 OPERATION OPERATION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("OPERATION",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$5 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.OPERATOR(opleft,opright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$5",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERATION ::= TK_concat NT$5 OPERATION OPERATION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("OPERATION",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$6 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.OPERATOR(opleft,opright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$6",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERATION ::= TK_kleene NT$6 OPERATION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("OPERATION",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$7 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.OPERATOR(opleft,opright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$7",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERATION ::= TK_positive NT$7 OPERATION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("OPERATION",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$8 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.OPERATOR(opleft,opright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$8",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERATION ::= TK_optional NT$8 OPERATION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("OPERATION",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERATION ::= OPERAND 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("OPERATION",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERAND ::= TK_lbr IDS TK_rbr 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		painter.VARIABLEUSE(opleft,opright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("OPERAND",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERAND ::= TK_str 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.STRING(opleft,opright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("OPERAND",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERAND ::= TK_newline 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.SPECIALCHAR(opleft,opright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("OPERAND",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERAND ::= TK_singlequ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.SPECIALCHAR(opleft,opright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("OPERAND",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERAND ::= TK_doublequ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.SPECIALCHAR(opleft,opright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("OPERAND",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EVALUATIONS ::= EVALUATIONS EVALUATION 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EVALUATIONS",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EVALUATIONS ::= EVALUATION 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EVALUATIONS",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EVALUATIONS ::= EVALUATIONS error 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EVALUATIONS",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EVALUATIONS ::= error 
            {
              Object RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EVALUATIONS",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$9 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.REGEXUSE(idleft,idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$9",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.STRING(strleft,strright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$10",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EVALUATION ::= IDS NT$9 TK_colon TK_str NT$10 TK_semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EVALUATION",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IDS ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = id;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDS",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IDS ::= TK_char 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		RESULT = id;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IDS",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserF$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
              return CUP$ParserF$do_action_part00000000(
                               CUP$ParserF$act_num,
                               CUP$ParserF$parser,
                               CUP$ParserF$stack,
                               CUP$ParserF$top);
    }
}

}
