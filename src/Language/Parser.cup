/* 1. Package e importaciones */
package Language;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import Colors.Type;
import Components.Response;
import Components.ErrorS;
import Components.Expression;
import Components.Set;
import Tree.Node;

/* 2. Codigo para el parser, variables y metodos */

parser code 
{:
    public Scanner s;
    private int id = 0;
    private int leaf = 1;
    private int errors = 0;
    public ArrayList<Response> errorsS = new ArrayList<>();
    public Map<String,Set> sets = new TreeMap<>();
    public Map<String,Node> regexs = new TreeMap<>();
    public ArrayList<Expression> expressions = new ArrayList<>();
    public Parser(Scanner s) {
        super(s);
        this.s = s;
    }
    public void syntax_error(Symbol sym) {
        errorsS.add(new Response(new ErrorS(sym.left,sym.right,sym.value,Sym.terminalNames[sym.sym])));
        errors ++;
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        errorsS.add(new Response("Error SintÃ¡ctico sin recuperar."));
    }
    public boolean isSuccessExecution() {
        return !(errors > 0);
    }
    public boolean thereAreTrees() {
        return regexs.size() > 0;
    }
    public boolean thereAreExpressions() {
        return expressions.size() > 0;
    }
    public String getErrors() {
        return errorsS.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    private void addSet(String set,Set elements) {
        elements.id = set;
        sets.put(set,elements);
    }
    private void addTree(String regex,Node op) {
        Node root = new Node(this.id + 1,".",Type.CONCAT);
        root.left = op;
        root.right = new Node(this.id,"#",Type.LEAF,Type.END);
        root.right.anulable = false;
        root.right.i = this.leaf;
        root.anulable = root.left.anulable && root.right.anulable;
        regexs.put(regex,root);
        this.id = 0;
        this.leaf = 1;
    }
    private Node buildTree(String value,Node left,Node right,boolean anulable,Type type) {
        Node root = new Node(id,value,type);
        root.anulable = anulable;
        root.left = left;
        root.right = right;
        id ++;
        return root;
    }
    private Node buildTree(String op,Type type,Type type1) {
        Node root = new Node(id,op,type,type1);
        root.anulable = false;
        root.i = leaf;
        id ++;
        leaf ++;
        return root;
    }
    private void addExpression(String exp,String string) {
        expressions.add(new Expression(exp,string));
    }
:} 

/* 3. Terminales*/

terminal String RW_CONJ, TK_id, TK_str, TK_char, TK_charnum, TK_charascii;
terminal String TK_lbr, TK_rbr, TK_lpar, TK_rpar;
terminal String TK_semicolon, TK_colon, TK_comma, TK_prompt, TK_tilde;
terminal String TK_concat, TK_or, TK_positive, TK_kleene, TK_optional;
terminal String TK_limit, TK_singlequ, TK_doublequ, TK_newline;

/* 4. No Terminales*/
non terminal INI, CODE, DECLARATIONS, DECLARATION, EVALUATIONS, EVALUATION;
non terminal Set ELEMENTS;
non terminal ArrayList<Character> SPECIFIC;
non terminal Node OPERATION, OPERAND;
non terminal String CHARACTER;
non terminal String IDS;

/* 5. Precedencias */

/* 6. Gramatica Libre de Contexto */

start with INI;

INI ::=
    TK_lbr CODE TK_rbr  |
    TK_lbr TK_rbr       ;

CODE ::=
    DECLARATIONS TK_limit EVALUATIONS   |
    DECLARATIONS TK_limit               |
    DECLARATIONS                        |
    TK_limit EVALUATIONS                |
    TK_limit                            ;

DECLARATIONS ::=
    DECLARATIONS DECLARATION    |
    DECLARATION                 |
    DECLARATIONS error          |
    error                       ;

DECLARATION ::=
    RW_CONJ TK_colon IDS:set TK_prompt ELEMENTS:elem TK_semicolon   {:addSet(set,elem); :} |
    IDS:regex TK_prompt OPERATION:op TK_semicolon                   {:addTree(regex,op);:} ;

ELEMENTS ::=
    CHARACTER:ch1 TK_tilde CHARACTER:ch2    {:RESULT = new Set(ch1.charAt(0),ch2.charAt(0));:} |
    SPECIFIC:sp                             {:RESULT = new Set(sp);                         :} ;

SPECIFIC ::=
    SPECIFIC:sp TK_comma CHARACTER:ch {:sp.add(ch.charAt(0)); RESULT = sp;                    :} |
    CHARACTER:ch                      {:RESULT = new ArrayList<>(Arrays.asList(ch.charAt(0)));:} ;
    
CHARACTER ::=
    TK_char     :ch    {:RESULT = ch;:} |
    TK_charnum  :ch    {:RESULT = ch;:} |
    TK_charascii:ch    {:RESULT = ch;:} |
    TK_lbr      :ch    {:RESULT = ch;:} |
    TK_rbr      :ch    {:RESULT = ch;:} |
    TK_lpar     :ch    {:RESULT = ch;:} |
    TK_rpar     :ch    {:RESULT = ch;:} |
    TK_semicolon:ch    {:RESULT = ch;:} |
    TK_colon    :ch    {:RESULT = ch;:} |
    TK_comma    :ch    {:RESULT = ch;:} |
    TK_or       :ch    {:RESULT = ch;:} |
    TK_concat   :ch    {:RESULT = ch;:} |
    TK_positive :ch    {:RESULT = ch;:} |
    TK_kleene   :ch    {:RESULT = ch;:} ;

OPERATION ::=
    TK_or       OPERATION:op1 OPERATION:op2 {:RESULT = buildTree("|",op1,op2,op1.anulable || op2.anulable,Type.OR);    :} |
    TK_concat   OPERATION:op1 OPERATION:op2 {:RESULT = buildTree(".",op1,op2,op1.anulable && op2.anulable,Type.CONCAT);:} |
    TK_kleene   OPERATION:op1               {:RESULT = buildTree("*",op1,null,true,Type.KLEENE);                       :} |
    TK_positive OPERATION:op1               {:RESULT = buildTree("+",op1,null,op1.anulable,Type.POSITIVE);             :} |
    TK_optional OPERATION:op1               {:RESULT = buildTree("?",op1,null,true,Type.OPTIONAL);                     :} |
    OPERAND:op                              {:RESULT = op;                                                             :} ;

OPERAND ::=
    TK_lbr TK_id:op TK_rbr     {:RESULT = buildTree(op,Type.LEAF,Type.ID);         :} |
    TK_str      :op            {:RESULT = buildTree(op,Type.LEAF,Type.STRING);     :} |
    TK_newline  :op            {:RESULT = buildTree(op,Type.LEAF,Type.ENTER);      :} |
    TK_singlequ :op            {:RESULT = buildTree(op,Type.LEAF,Type.SINGLEQUOTE);:} |
    TK_doublequ :op            {:RESULT = buildTree(op,Type.LEAF,Type.DOUBLEQUOTE);:} ;

EVALUATIONS ::=
    EVALUATIONS EVALUATION  |
    EVALUATION              |
    EVALUATIONS error       |
    error                   ;

EVALUATION ::=
    IDS:exp TK_colon TK_str:str TK_semicolon    {:addExpression(exp,str);:} ;

IDS ::=
    TK_id  :id {:RESULT = id;:} |
    TK_char:id {:RESULT = id;:} ;