/* 1. Package e importaciones */
package Language;
import java_cup.runtime.*;
import java.util.ArrayList;
import Components.ErrorS;
import Components.Instruction;
import BackEnd.Set;

/* 2. Codigo para el parser, variables y metodos */

parser code 
{:
    Scanner s;
    public Parser(Scanner s) {
        super(s);
        this.s = s;
    }

    //ArrayList<Instruction> flowExe = new ArrayList<>();
    ArrayList<Instruction> errors = new ArrayList<>();
    ArrayList<Set> sets = new ArrayList<>();
    Set set;
    public void syntax_error(Symbol sym) {
        errors.add(
            new Instruction(
                new ErrorS(
                    sym.left,
                    sym.right,
                    sym.value
                )
            )
        );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        errors.add(
            new Instruction("Unrecovered Syntax Error.")
        );
    }
    public String getExecution() {
        String exe = "";
        /*for(int i = 0; i < flowExe.size(); i ++) {
            exe += flowExe.get(i) + "\n";
        }*/
        for(int i = 0; i < errors.size(); i ++) {
            exe += errors.get(i) + "\n";
        }
        return exe + "\n";
    }
    public void initSet(String startChar,String endChar) {
        this.set = new Set();
        this.set.startChar = startChar;
        this.set.endChar = endChar;
    }
    public void initSet() {
        this.set = new Set();
        this.set.specifics = new ArrayList<>();
    }
    public void addSpecific(String ch) {
        this.set.specifics.add(ch);
    }
    public void setId(String id) {
        this.set.id = id;
        sets.add(this.set);
    }
    public ArrayList<Set> getSets() {
        return sets;
    }
:} 

/* 3. Terminales*/

terminal String RW_CONJ, ID, STRING, CHAR;
terminal String LBRACKET, RBRACKET;
terminal String SEMICOLON, COLON, COMMA, PROMPT, TILDE;
terminal String OR, POSITIVE, KLEENE, CONCAT;
terminal String LIMIT;

/* 4. No Terminales*/
non terminal ini;
non terminal instructions,instruction;
non terminal set, elements;
non terminal specific, regex;
non terminal operations, operation;
non terminal node;
non terminal String character;
non terminal analysis, expresion;

/* 5. Precedencias */

/* 6. Gramatica Libre de Contexto */

start with ini;

ini::=LBRACKET instructions LIMIT analysis RBRACKET;

instructions::=
    instruction instructions |
    instruction error |
    instruction;

instruction::=
    set |
    regex;

set::=RW_CONJ COLON ID:id PROMPT elements SEMICOLON {:setId(id);:};

elements::=
    character:start TILDE character:end {:initSet(start,end);:} |
    specific;

specific::=
    specific COMMA character:ch {:addSpecific(ch);:} |
    character:ch                {:initSet();addSpecific(ch);:};

character::=
    CHAR:ch         {:RESULT = ch;:} |
    LBRACKET:lb     {:RESULT = lb;:} |
    RBRACKET:rb     {:RESULT = rb;:} |
    SEMICOLON:sm    {:RESULT = sm;:} |
    COLON:cn        {:RESULT = cn;:} |
    COMMA:cm        {:RESULT = cm;:} |
    OR:or           {:RESULT = or;:} |
    POSITIVE:pl     {:RESULT = pl;:} |
    KLEENE:kl       {:RESULT = kl;:} |
    CONCAT:cc       {:RESULT = cc;:};

regex::=ID PROMPT operations SEMICOLON;

operations::=operations operation | operation;

operation::=
    CONCAT operation operation |
    OR operation operation |
    KLEENE operation |
    POSITIVE operation |
    node;

node::=
    LBRACKET ID RBRACKET |
    STRING;

analysis::=
    expresion analysis |
    expresion error |
    expresion;

expresion::=ID COLON STRING SEMICOLON;